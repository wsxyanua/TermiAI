import os
import subprocess
from typing import Optional
import typer
from rich.console import Console
from rich.prompt import Prompt
from rich.panel import Panel
import json
from pathlib import Path
import ollama
from datetime import datetime
from rich.spinner import Spinner
import time

# Initialize Typer app and Rich console
app = typer.Typer()
console = Console()

# History file path
HISTORY_FILE = Path.home() / ".ai_terminal_history.json"
SCRIPTS_DIR = Path.home() / ".ai_terminal_scripts"

# Available models
AVAILABLE_MODELS = {
    "deepseek-coder": "deepseek-coder",
    "deepseek-r1": "deepseek-r1"
}

# Create scripts directory if it doesn't exist
SCRIPTS_DIR.mkdir(exist_ok=True)

def load_history():
    """Load command history from file."""
    if HISTORY_FILE.exists():
        with open(HISTORY_FILE, "r") as f:
            return json.load(f)
    return []

def save_history(history):
    """Save command history to file."""
    with open(HISTORY_FILE, "w") as f:
        json.dump(history, f)

def get_ai_suggestion(user_input: str, history: list, model_type: str, mode: str = "command") -> str:
    """Get AI suggestion based on the mode."""
    try:
        if mode == "command":
            prompt = "You are a helpful terminal assistant. Convert the following request into an appropriate terminal command. Only respond with the command, no explanations.\n\n"
        elif mode == "explain":
            prompt = "You are a helpful terminal assistant. Explain the following command in detail, breaking down each part and its purpose. Be concise but informative.\n\n"
        elif mode == "fix":
            prompt = "You are a helpful terminal assistant. Fix the following incorrect command and explain what was wrong. Only respond with the fixed command.\n\n"
        elif mode == "chat":
            prompt = "You are a helpful terminal assistant. Provide a clear and concise response to the following technical question.\n\n"
        elif mode == "search":
            prompt = "You are a helpful terminal assistant. Generate a command to search for files based on the following description. Only respond with the command.\n\n"
        
        # Add relevant history for command mode
        if mode == "command":
            for entry in history[-5:]:
                prompt += f"Request: {entry['request']}\nCommand: {entry['command']}\n\n"
        
        prompt += f"Request: {user_input}\n"
        if mode == "command":
            prompt += "Command:"
        elif mode == "explain":
            prompt += "Explanation:"
        elif mode == "fix":
            prompt += "Fixed command:"
        elif mode == "chat":
            prompt += "Response:"
        elif mode == "search":
            prompt += "Search command:"
        
        # Add loading spinner
        with Spinner("Thinking...", text="Processing your request"):
            response = ollama.generate(
                model=AVAILABLE_MODELS[model_type],
                prompt=prompt
            )
        return response['response'].strip()
    except Exception as e:
        console.print(f"[red]Error getting AI suggestion: {str(e)}[/red]")
        return None

def execute_command(command: str) -> tuple[bool, str]:
    """Execute a terminal command and return success status and output."""
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True
        )
        return result.returncode == 0, result.stdout or result.stderr
    except Exception as e:
        return False, str(e)

def save_to_script(commands: list, description: str):
    """Save commands to a shell script."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    script_path = SCRIPTS_DIR / f"ai_terminal_script_{timestamp}.sh"
    
    with open(script_path, "w") as f:
        f.write("#!/bin/bash\n\n")
        f.write(f"# Generated by AI Terminal Assistant\n")
        f.write(f"# Description: {description}\n")
        f.write(f"# Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        for cmd in commands:
            f.write(f"# {cmd['request']}\n")
            f.write(f"{cmd['command']}\n\n")
    
    os.chmod(script_path, 0o755)
    return script_path

@app.command()
def main(
    model: str = typer.Option(
        "deepseek-coder",
        help="Choose the AI model to use (deepseek-coder or deepseek-r1)"
    )
):
    """Start the AI Terminal Assistant."""
    if model not in AVAILABLE_MODELS:
        console.print(f"[red]Model '{model}' is not supported. Choose from: {', '.join(AVAILABLE_MODELS.keys())}[/red]")
        raise typer.Exit(code=1)

    console.print(Panel.fit(
        f"[bold blue]AI Terminal Assistant[/bold blue]\n"
        f"Using model: [yellow]{model}[/yellow]\n"
        "Type your request in natural language.\n"
        "Type 'help' for available commands or 'exit' to quit.",
        title="Welcome"
    ))
    
    history = load_history()
    current_session_commands = []
    
    while True:
        try:
            user_input = Prompt.ask("\n[bold green]What would you like to do?[/bold green]")
            
            if user_input.lower() == "exit":
                break
            elif user_input.lower() == "help":
                console.print(Panel.fit(
                    "[bold]Available Commands:[/bold]\n"
                    "- Type your request in natural language\n"
                    "- help: Show this help message\n"
                    "- exit: Quit the assistant\n"
                    "- history: Show command history\n"
                    "- model: Show current model and available models\n"
                    "- explain <command>: Explain a command\n"
                    "- fix <command>: Fix an incorrect command\n"
                    "- chat <question>: Ask a technical question\n"
                    "- search <description>: Generate file search command\n"
                    "- save: Save current session commands to script",
                    title="Help"
                ))
                continue
            elif user_input.lower() == "history":
                if history:
                    console.print("\n[bold]Command History:[/bold]")
                    for entry in history[-10:]:
                        console.print(f"[cyan]Request:[/cyan] {entry['request']}")
                        console.print(f"[green]Command:[/green] {entry['command']}")
                        console.print(f"[yellow]Status:[/yellow] {'Success' if entry['success'] else 'Failed'}\n")
                else:
                    console.print("[yellow]No command history available.[/yellow]")
                continue
            elif user_input.lower() == "model":
                console.print("\n[bold]Available Models:[/bold]")
                for model_name in AVAILABLE_MODELS:
                    console.print(f"- {model_name}: {AVAILABLE_MODELS[model_name]}")
                console.print(f"\n[bold]Current Model:[/bold] {model}")
                continue
            elif user_input.lower() == "save":
                if current_session_commands:
                    description = Prompt.ask("Enter a description for the script")
                    script_path = save_to_script(current_session_commands, description)
                    console.print(f"[green]Script saved to: {script_path}[/green]")
                    current_session_commands = []
                else:
                    console.print("[yellow]No commands to save in current session.[/yellow]")
                continue
            
            # Handle different modes
            mode = "command"
            if user_input.lower().startswith("explain "):
                mode = "explain"
                user_input = user_input[8:]
            elif user_input.lower().startswith("fix "):
                mode = "fix"
                user_input = user_input[4:]
            elif user_input.lower().startswith("chat "):
                mode = "chat"
                user_input = user_input[5:]
            elif user_input.lower().startswith("search "):
                mode = "search"
                user_input = user_input[7:]
            
            # Get AI suggestion with loading spinner
            response = get_ai_suggestion(user_input, history, model, mode)
            if not response:
                continue
            
            if mode == "command":
                # Confirm command execution
                console.print(f"\n[bold]Suggested command:[/bold] {response}")
                if Prompt.ask("Execute this command?", choices=["y", "n"], default="y") == "y":
                    success, output = execute_command(response)
                    
                    # Save to history and current session
                    command_entry = {
                        "request": user_input,
                        "command": response,
                        "success": success
                    }
                    history.append(command_entry)
                    current_session_commands.append(command_entry)
                    save_history(history)
                    
                    # Display result
                    if success:
                        console.print("[green]Command executed successfully![/green]")
                        if output:
                            console.print(f"\n[bold]Output:[/bold]\n{output}")
                    else:
                        console.print("[red]Command failed![/red]")
                        if output:
                            console.print(f"\n[bold]Error:[/bold]\n{output}")
            else:
                # Display response for other modes
                console.print(f"\n[bold]Response:[/bold]\n{response}")
            
        except KeyboardInterrupt:
            console.print("\n[yellow]Use 'exit' to quit the assistant.[/yellow]")
        except Exception as e:
            console.print(f"[red]An error occurred: {str(e)}[/red]")

if __name__ == "__main__":
    app() 